"""flexible_calculation_log

Revision ID: f18fbf983ca9
Revises: faa734c2aa46
Create Date: 2024-10-16 17:33:45.936155

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "f18fbf983ca9"
down_revision = "faa734c2aa46"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "calculation_log_variable_metadata",
        sa.Column("calculation_log_id", sa.Integer(), nullable=False),
        sa.Column("variable_id", sa.INTEGER(), nullable=False),
        sa.Column("name", sa.VARCHAR(length=64), nullable=False),
        sa.Column("description", sa.VARCHAR(length=512), nullable=False),
        sa.ForeignKeyConstraint(["calculation_log_id"], ["calculation_log.calculation_log_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("calculation_log_id", "variable_id"),
    )
    op.create_table(
        "calculation_log_variable_value",
        sa.Column("calculation_log_id", sa.Integer(), nullable=False),
        sa.Column("variable_id", sa.INTEGER(), nullable=False),
        sa.Column("site_id_snapshot", sa.INTEGER(), nullable=False),
        sa.Column("interval_period", sa.INTEGER(), nullable=False),
        sa.Column("value", sa.DOUBLE_PRECISION(), nullable=False),
        sa.ForeignKeyConstraint(["calculation_log_id"], ["calculation_log.calculation_log_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("calculation_log_id", "variable_id", "site_id_snapshot", "interval_period"),
    )
    op.drop_table("power_flow_log")
    op.drop_table("power_forecast_log")
    op.drop_table("power_target_log")
    op.drop_table("weather_forecast_log")
    op.drop_index("ix_calculation_log_calculation_interval_start", table_name="calculation_log")
    op.alter_column("calculation_log", "calculation_interval_start", new_column_name="calculation_range_start")
    op.alter_column(
        "calculation_log", "calculation_interval_duration_seconds", new_column_name="calculation_range_duration_seconds"
    )
    op.create_index(
        op.f("ix_calculation_log_calculation_range_start"), "calculation_log", ["calculation_range_start"], unique=False
    )
    op.add_column(
        "calculation_log", sa.Column("interval_width_seconds", sa.INTEGER(), nullable=False, server_default="300")
    )
    op.alter_column("calculation_log", "interval_width_seconds", server_default=None)
    op.add_column("calculation_log", sa.Column("power_forecast_basis_time", sa.DateTime(timezone=True), nullable=True))

    op.alter_column("certificate", "created", existing_type=postgresql.TIMESTAMP(timezone=True), nullable=False)
    op.add_column("dynamic_operating_envelope", sa.Column("calculation_log_id", sa.Integer(), nullable=True))
    op.create_foreign_key(
        "dynamic_operating_envelope_calculation_log_id_fkey",
        "dynamic_operating_envelope",
        "calculation_log",
        ["calculation_log_id"],
        ["calculation_log_id"],
    )
    op.create_index(
        op.f("ix_dynamic_operating_envelope_calculation_log_id"),
        "dynamic_operating_envelope",
        ["calculation_log_id"],
        unique=False,
    )
    op.alter_column("subscription_condition", "lower_threshold", existing_type=sa.INTEGER(), nullable=False)
    op.alter_column("subscription_condition", "upper_threshold", existing_type=sa.INTEGER(), nullable=False)
    op.add_column("tariff_generated_rate", sa.Column("calculation_log_id", sa.Integer(), nullable=True))
    op.create_foreign_key(
        "tariff_generated_rate_calculation_log_id_fkey",
        "tariff_generated_rate",
        "calculation_log",
        ["calculation_log_id"],
        ["calculation_log_id"],
    )
    op.create_index(
        op.f("ix_tariff_generated_rate_calculation_log_id"),
        "tariff_generated_rate",
        ["calculation_log_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_tariff_generated_rate_calculation_log_id"), table_name="tariff_generated_rate")
    op.drop_constraint("tariff_generated_rate_calculation_log_id_fkey", "tariff_generated_rate", type_="foreignkey")
    op.drop_column("tariff_generated_rate", "calculation_log_id")
    op.alter_column("subscription_condition", "upper_threshold", existing_type=sa.INTEGER(), nullable=True)
    op.alter_column("subscription_condition", "lower_threshold", existing_type=sa.INTEGER(), nullable=True)
    op.drop_index(op.f("ix_dynamic_operating_envelope_calculation_log_id"), table_name="dynamic_operating_envelope")
    op.drop_constraint(
        "dynamic_operating_envelope_calculation_log_id_fkey", "dynamic_operating_envelope", type_="foreignkey"
    )
    op.drop_column("dynamic_operating_envelope", "calculation_log_id")
    op.alter_column("certificate", "created", existing_type=postgresql.TIMESTAMP(timezone=True), nullable=True)

    op.drop_index(op.f("ix_calculation_log_calculation_range_start"), table_name="calculation_log")
    op.alter_column("calculation_log", "calculation_range_start", new_column_name="calculation_interval_start")
    op.alter_column(
        "calculation_log", "calculation_range_duration_seconds", new_column_name="calculation_interval_duration_seconds"
    )
    op.create_index(
        "ix_calculation_log_calculation_interval_start", "calculation_log", ["calculation_interval_start"], unique=False
    )
    op.drop_column("calculation_log", "power_forecast_basis_time")
    op.drop_column("calculation_log", "interval_width_seconds")
    op.create_table(
        "weather_forecast_log",
        sa.Column("weather_forecast_log_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("interval_start", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.Column("interval_duration_seconds", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("air_temperature_degrees_c", sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
        sa.Column(
            "apparent_temperature_degrees_c", sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True
        ),
        sa.Column("dew_point_degrees_c", sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
        sa.Column("humidity_percent", sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
        sa.Column("cloud_cover_percent", sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
        sa.Column("rain_probability_percent", sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
        sa.Column("rain_mm", sa.NUMERIC(precision=8, scale=2), autoincrement=False, nullable=True),
        sa.Column("rain_rate_mm", sa.NUMERIC(precision=8, scale=2), autoincrement=False, nullable=True),
        sa.Column(
            "global_horizontal_irradiance_watts_m2",
            sa.NUMERIC(precision=8, scale=2),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("wind_speed_50m_km_h", sa.NUMERIC(precision=8, scale=2), autoincrement=False, nullable=True),
        sa.Column("calculation_log_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["calculation_log_id"],
            ["calculation_log.calculation_log_id"],
            name="weather_forecast_log_calculation_log_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("weather_forecast_log_id", name="weather_forecast_log_pkey"),
    )
    op.create_table(
        "power_target_log",
        sa.Column("power_target_log_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("interval_start", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.Column("interval_duration_seconds", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("external_device_id", sa.VARCHAR(length=64), autoincrement=False, nullable=True),
        sa.Column("site_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("target_active_power_watts", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("target_reactive_power_var", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("calculation_log_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["calculation_log_id"],
            ["calculation_log.calculation_log_id"],
            name="power_target_log_calculation_log_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(["site_id"], ["site.site_id"], name="power_target_log_site_id_fkey"),
        sa.PrimaryKeyConstraint("power_target_log_id", name="power_target_log_pkey"),
    )
    op.create_table(
        "power_forecast_log",
        sa.Column("power_forecast_log_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("interval_start", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.Column("interval_duration_seconds", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("external_device_id", sa.VARCHAR(length=64), autoincrement=False, nullable=True),
        sa.Column("site_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("active_power_watts", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("reactive_power_var", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("calculation_log_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["calculation_log_id"],
            ["calculation_log.calculation_log_id"],
            name="power_forecast_log_calculation_log_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(["site_id"], ["site.site_id"], name="power_forecast_log_site_id_fkey"),
        sa.PrimaryKeyConstraint("power_forecast_log_id", name="power_forecast_log_pkey"),
    )
    op.create_table(
        "power_flow_log",
        sa.Column("power_flow_log_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("interval_start", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.Column("interval_duration_seconds", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("external_device_id", sa.VARCHAR(length=64), autoincrement=False, nullable=True),
        sa.Column("site_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("solve_name", sa.VARCHAR(length=16), autoincrement=False, nullable=True),
        sa.Column("pu_voltage_min", sa.NUMERIC(precision=8, scale=6), autoincrement=False, nullable=True),
        sa.Column("pu_voltage_max", sa.NUMERIC(precision=8, scale=6), autoincrement=False, nullable=True),
        sa.Column("pu_voltage", sa.NUMERIC(precision=8, scale=6), autoincrement=False, nullable=True),
        sa.Column("thermal_max_percent", sa.NUMERIC(precision=8, scale=4), autoincrement=False, nullable=True),
        sa.Column("calculation_log_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["calculation_log_id"],
            ["calculation_log.calculation_log_id"],
            name="power_flow_log_calculation_log_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(["site_id"], ["site.site_id"], name="power_flow_log_site_id_fkey"),
        sa.PrimaryKeyConstraint("power_flow_log_id", name="power_flow_log_pkey"),
    )
    op.drop_table("calculation_log_variable_value")
    op.drop_table("calculation_log_variable_metadata")
    # ### end Alembic commands ###
