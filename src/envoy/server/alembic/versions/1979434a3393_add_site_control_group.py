"""add_site_control_group

Revision ID: 1979434a3393
Revises: b56468b9b547
Create Date: 2025-05-16 20:17:31.889740

"""

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "1979434a3393"
down_revision = "b56468b9b547"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "archive_site_control_group",
        sa.Column("site_control_group_id", sa.INTEGER(), nullable=False),
        sa.Column("description", sa.VARCHAR(length=32), nullable=False),
        sa.Column("primacy", sa.INTEGER(), nullable=False),
        sa.Column("created_time", sa.DateTime(timezone=True), nullable=False),
        sa.Column("changed_time", sa.DateTime(timezone=True), nullable=False),
        sa.Column("archive_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("archive_time", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("deleted_time", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("archive_id"),
    )
    op.create_index(
        op.f("ix_archive_site_control_group_deleted_time"), "archive_site_control_group", ["deleted_time"], unique=False
    )
    op.create_index(
        op.f("ix_archive_site_control_group_site_control_group_id"),
        "archive_site_control_group",
        ["site_control_group_id"],
        unique=False,
    )
    op.create_table(
        "site_control_group",
        sa.Column("site_control_group_id", sa.Integer(), nullable=False),
        sa.Column("description", sa.VARCHAR(length=32), nullable=False),
        sa.Column("primacy", sa.Integer(), nullable=False),
        sa.Column("created_time", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("changed_time", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("site_control_group_id"),
    )
    op.create_index(op.f("ix_site_control_group_changed_time"), "site_control_group", ["changed_time"], unique=False)
    op.create_index(
        op.f("ix_site_control_group_primacy_site_control_group_id"),
        "site_control_group",
        ["primacy", "site_control_group_id"],
        unique=False,
    )

    # We need to create a "doe" control group entry if there are existing DOEs - otherwise we leave the table blank
    # This will have site_control_group_id = 1 and will represent the old, static, group labelled as "doe"
    op.execute(
        """INSERT INTO site_control_group(description, primacy, created_time, changed_time)
SELECT 'Dynamic Operating Envelopes' as description,
        0 as primacy,
        now() as created_time,
        now() as changed_time
FROM dynamic_operating_envelope
LIMIT 1;
"""
    )

    # site_control_group_id will need to default to the newly created group (right above) but then have the default
    # removed
    op.add_column(
        "archive_dynamic_operating_envelope",
        sa.Column("site_control_group_id", sa.INTEGER(), nullable=False, server_default=sa.text("1")),
    )
    op.alter_column("archive_dynamic_operating_envelope", "site_control_group_id", server_default=None)
    op.alter_column("archive_dynamic_operating_envelope", "import_limit_active_watts", nullable=True)
    op.alter_column("archive_dynamic_operating_envelope", "export_limit_watts", nullable=True)

    op.drop_index("archive_doe_end_time_deleted_time_site_id", table_name="archive_dynamic_operating_envelope")
    op.create_index(
        "archive_doe_site_control_group_id_end_time_deleted_time_site_id",
        "archive_dynamic_operating_envelope",
        ["site_control_group_id", "end_time", "deleted_time", "site_id"],
        unique=False,
    )
    op.add_column(
        "dynamic_operating_envelope",
        sa.Column("site_control_group_id", sa.Integer(), nullable=False, server_default=sa.text("1")),
    )
    op.alter_column("dynamic_operating_envelope", "site_control_group_id", server_default=None)
    op.alter_column("dynamic_operating_envelope", "import_limit_active_watts", nullable=True)
    op.alter_column("dynamic_operating_envelope", "export_limit_watts", nullable=True)
    op.drop_index("ix_dynamic_operating_envelope_end_time_site_id", table_name="dynamic_operating_envelope")
    op.drop_constraint("start_time_site_id_uc", "dynamic_operating_envelope", type_="unique")
    op.create_index(
        "ix_site_control_group_dynamic_operating_envelope_end_time_site",
        "dynamic_operating_envelope",
        ["site_control_group_id", "end_time", "site_id"],
        unique=False,
    )
    op.create_unique_constraint(
        "site_control_group_id_start_time_site_id_uc",
        "dynamic_operating_envelope",
        ["site_control_group_id", "start_time", "site_id"],
    )
    op.create_foreign_key(
        None, "dynamic_operating_envelope", "site_control_group", ["site_control_group_id"], ["site_control_group_id"]
    )
    # ### end Alembic commands ###

    # We need to migrate existing subscriptions that are on DOE. The old was to leave resource_id NULL but
    # the recent change means that resource_id will need to reference a site_control_group_id. We will rewrite
    # these subscriptions to point to our new site_control_group with ID 1 (inserted above)
    op.execute("UPDATE subscription SET resource_id = 1 WHERE resource_type = 2 AND resource_id is NULL;")


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "dynamic_operating_envelope", type_="foreignkey")
    op.drop_constraint("site_control_group_id_start_time_site_id_uc", "dynamic_operating_envelope", type_="unique")
    op.drop_index(
        "ix_site_control_group_dynamic_operating_envelope_end_time_site", table_name="dynamic_operating_envelope"
    )
    op.create_unique_constraint("start_time_site_id_uc", "dynamic_operating_envelope", ["start_time", "site_id"])
    op.create_index(
        "ix_dynamic_operating_envelope_end_time_site_id",
        "dynamic_operating_envelope",
        ["end_time", "site_id"],
        unique=False,
    )
    op.drop_column("dynamic_operating_envelope", "site_control_group_id")
    op.drop_index(
        "archive_doe_site_control_group_id_end_time_deleted_time_site_id",
        table_name="archive_dynamic_operating_envelope",
    )
    op.create_index(
        "archive_doe_end_time_deleted_time_site_id",
        "archive_dynamic_operating_envelope",
        ["end_time", "deleted_time", "site_id"],
        unique=False,
    )
    op.drop_column("archive_dynamic_operating_envelope", "site_control_group_id")
    op.alter_column("archive_dynamic_operating_envelope", "import_limit_active_watts", nullable=False)
    op.alter_column("archive_dynamic_operating_envelope", "export_limit_watts", nullable=False)
    op.alter_column("dynamic_operating_envelope", "import_limit_active_watts", nullable=False)
    op.alter_column("dynamic_operating_envelope", "export_limit_watts", nullable=False)
    op.drop_index(op.f("ix_site_control_group_changed_time"), table_name="site_control_group")
    op.drop_table("site_control_group")
    op.drop_index(op.f("ix_archive_site_control_group_site_control_group_id"), table_name="archive_site_control_group")
    op.drop_index(op.f("ix_archive_site_control_group_deleted_time"), table_name="archive_site_control_group")
    op.drop_table("archive_site_control_group")

    # This will undo the DOE subscription rewriting done during UP
    op.execute("UPDATE subscription SET resource_id = NULL WHERE resource_type = 2 AND resource_id is 1;")
    # ### end Alembic commands ###
