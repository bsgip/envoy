"""added_calculation_log

Revision ID: faa734c2aa46
Revises: 6fe657562691
Create Date: 2024-04-04 11:33:30.352006

"""

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "faa734c2aa46"
down_revision = "6fe657562691"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "calculation_log",
        sa.Column("calculation_log_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_time", sa.DateTime(timezone=True), nullable=False),
        sa.Column("calculation_interval_start", sa.DateTime(timezone=True), nullable=False),
        sa.Column("calculation_interval_duration_seconds", sa.INTEGER(), nullable=False),
        sa.Column("topology_id", sa.VARCHAR(length=64), nullable=True),
        sa.Column("external_id", sa.VARCHAR(length=64), nullable=True),
        sa.Column("description", sa.VARCHAR(length=1024), nullable=True),
        sa.Column("power_forecast_creation_time", sa.DateTime(timezone=True), nullable=True),
        sa.Column("weather_forecast_creation_time", sa.DateTime(timezone=True), nullable=True),
        sa.Column("weather_forecast_location_id", sa.VARCHAR(length=128), nullable=True),
        sa.PrimaryKeyConstraint("calculation_log_id"),
    )
    op.create_index(
        op.f("ix_calculation_log_calculation_interval_start"),
        "calculation_log",
        ["calculation_interval_start"],
        unique=False,
    )
    op.create_table(
        "weather_forecast_log",
        sa.Column("weather_forecast_log_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("interval_start", sa.DateTime(timezone=True), nullable=False),
        sa.Column("interval_duration_seconds", sa.INTEGER(), nullable=False),
        sa.Column("air_temperature_degrees_c", sa.DECIMAL(precision=5, scale=2), nullable=True),
        sa.Column("apparent_temperature_degrees_c", sa.DECIMAL(precision=5, scale=2), nullable=True),
        sa.Column("dew_point_degrees_c", sa.DECIMAL(precision=5, scale=2), nullable=True),
        sa.Column("humidity_percent", sa.DECIMAL(precision=5, scale=2), nullable=True),
        sa.Column("cloud_cover_percent", sa.DECIMAL(precision=5, scale=2), nullable=True),
        sa.Column("rain_probability_percent", sa.DECIMAL(precision=5, scale=2), nullable=True),
        sa.Column("rain_mm", sa.DECIMAL(precision=8, scale=2), nullable=True),
        sa.Column("rain_rate_mm", sa.DECIMAL(precision=8, scale=2), nullable=True),
        sa.Column("global_horizontal_irradiance_watts_m2", sa.DECIMAL(precision=8, scale=2), nullable=True),
        sa.Column("wind_speed_50m_km_h", sa.DECIMAL(precision=8, scale=2), nullable=True),
        sa.Column("calculation_log_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["calculation_log_id"], ["calculation_log.calculation_log_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("weather_forecast_log_id"),
    )
    op.create_table(
        "power_flow_log",
        sa.Column("power_flow_log_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("interval_start", sa.DateTime(timezone=True), nullable=False),
        sa.Column("interval_duration_seconds", sa.INTEGER(), nullable=False),
        sa.Column("external_device_id", sa.VARCHAR(length=64), nullable=True),
        sa.Column("site_id", sa.Integer(), nullable=True),
        sa.Column("solve_name", sa.VARCHAR(length=16), nullable=True),
        sa.Column("pu_voltage_min", sa.DECIMAL(precision=8, scale=6), nullable=True),
        sa.Column("pu_voltage_max", sa.DECIMAL(precision=8, scale=6), nullable=True),
        sa.Column("pu_voltage", sa.DECIMAL(precision=8, scale=6), nullable=True),
        sa.Column("thermal_max_percent", sa.DECIMAL(precision=8, scale=4), nullable=True),
        sa.Column("calculation_log_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["calculation_log_id"], ["calculation_log.calculation_log_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["site_id"],
            ["site.site_id"],
        ),
        sa.PrimaryKeyConstraint("power_flow_log_id"),
    )
    op.create_table(
        "power_forecast_log",
        sa.Column("power_forecast_log_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("interval_start", sa.DateTime(timezone=True), nullable=False),
        sa.Column("interval_duration_seconds", sa.INTEGER(), nullable=False),
        sa.Column("external_device_id", sa.VARCHAR(length=64), nullable=True),
        sa.Column("site_id", sa.Integer(), nullable=True),
        sa.Column("active_power_watts", sa.INTEGER(), nullable=True),
        sa.Column("reactive_power_var", sa.INTEGER(), nullable=True),
        sa.Column("calculation_log_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["calculation_log_id"], ["calculation_log.calculation_log_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["site_id"],
            ["site.site_id"],
        ),
        sa.PrimaryKeyConstraint("power_forecast_log_id"),
    )
    op.create_table(
        "power_target_log",
        sa.Column("power_target_log_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("interval_start", sa.DateTime(timezone=True), nullable=False),
        sa.Column("interval_duration_seconds", sa.INTEGER(), nullable=False),
        sa.Column("external_device_id", sa.VARCHAR(length=64), nullable=True),
        sa.Column("site_id", sa.Integer(), nullable=True),
        sa.Column("target_active_power_watts", sa.INTEGER(), nullable=True),
        sa.Column("target_reactive_power_var", sa.INTEGER(), nullable=True),
        sa.Column("calculation_log_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["calculation_log_id"], ["calculation_log.calculation_log_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["site_id"],
            ["site.site_id"],
        ),
        sa.PrimaryKeyConstraint("power_target_log_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("power_target_log")
    op.drop_table("power_forecast_log")
    op.drop_table("power_flow_log")
    op.drop_table("weather_forecast_log")
    op.drop_index(op.f("ix_calculation_log_calculation_interval_start"), table_name="calculation_log")
    op.drop_table("calculation_log")
    # ### end Alembic commands ###
